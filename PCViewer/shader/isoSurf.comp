#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable
#define DIMXBIT 1
#define DIMYBIT 2
#define DIMZBIT 4

layout(std430, binding = 0) buffer Informations{
	uint amtOfAttributes;
	uint amtOfBrushAttributes;
	uint amtOfIndices;
	uint dimX;

	uint dimY;
	uint dimZ;
	uint xInd;
	uint yInd;

	uint zInd;
	float xMin;
	float xMax;
	float yMin;

	float yMax;
	float zMin;
	float zMax;
	uint linearDims;

	uint attributes[];
	//int array containing attribute infos:
	//index attr 1, amtOfBrushes 1, offset brush1
	//index attr 2, amtOfBrushes 2, offset brush2
	//...
} info;

//currently the maximum amount of density attributes is 30!
layout(std430, binding = 1) buffer brushes{
	float[] minMax;
};

layout(std430, binding = 2) buffer dimVals{
	vec4 dimSizes;
	float values[];
}dims;

layout(std430, binding = 3) buffer IndexBuffer{
	uint ind[];
};

layout(std430, binding = 4) buffer DataBuffer{
	float data[];
};

layout(binding = 5, r8) uniform writeonly image3D binary;

layout (local_size_x = 256,local_size_y=1,local_size_z=1) in;

int getVectorIndex(int dim, float v)
{
	//binary search
	int a = 0, b = int(dims.dimSizes[dim]), baseIndex = 0;
	if(dim == 1){
		baseIndex = int(dims.dimSizes.x);
	}
	if(dim == 2){
		baseIndex = int(dims.dimSizes.x + dims.dimSizes.y);
	}
	while (b - a > 1) {
		int h = (b + a) / 2;
		float val = dims.values[baseIndex + h];
		if (v < val)
			b = h;
		else
			a = h;
		if(val == v)
			break;
	}
	//a now at begin index, b at endindex
	return a;
}

void main(){
	if(gl_GlobalInvocationID.x >= info.amtOfIndices) return;
	uint i = ind[gl_GlobalInvocationID.x];
	bool lineKeep = true;
	for(int axis = 0;axis < info.amtOfBrushAttributes;++axis){
		bool good = false;
		uint axisInd = info.attributes[axis * 3];
		for(int brush = 0;brush< info.attributes[axis*3+1];++brush){
			float datum = data[i * info.amtOfAttributes + axisInd];
			float minn = minMax[info.attributes[axis*3+2]+brush * 2];
			float maxx = minMax[info.attributes[axis*3+2]+brush * 2 + 1];
			if(datum>=minn && datum<=maxx){
				good = true;
				break;
			}
		}
		if(!good){
			return;
		}
	}

	ivec3 pos;
	if(bool(info.linearDims & DIMXBIT))
		pos.x = int(((data[i*info.amtOfAttributes + info.xInd] - info.xMin) / (info.xMax - info.xMin)) * float(info.dimX - 1) + .5f);
	else
		pos.x = getVectorIndex(0, data[i*info.amtOfAttributes + info.xInd]);
	if(bool(info.linearDims & DIMYBIT))
		pos.y = int(((data[i*info.amtOfAttributes + info.yInd] - info.yMin) / (info.yMax - info.yMin)) * float(info.dimY - 1) + .5f);
	else
		pos.y = getVectorIndex(1, data[i*info.amtOfAttributes + info.yInd]);
	if(bool(info.linearDims & DIMZBIT))
		pos.z = int(((data[i*info.amtOfAttributes + info.zInd] - info.zMin) / (info.zMax - info.zMin)) * float(info.dimZ - 1) + .5f);
	else
		pos.z = getVectorIndex(2, data[i*info.amtOfAttributes + info.zInd]);
	pos = clamp(pos, ivec3(0), ivec3(info.dimX, info.dimY, info.dimZ));

	//storing 1 if element is in the brush
	imageStore(binary, pos, vec4(1));
}