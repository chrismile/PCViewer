#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(std430, binding = 0) buffer Informations{
	uint amtOfAttributes;
	uint amtOfDensityAttributes;
	uint amtOfIndices;
	uint dimX;

	uint dimY;
	uint dimZ;
	uint xInd;
	uint yInd;

	uint zInd;
	float xMin;
	float xMax;
	float yMin;

	float yMax;
	float zMin;
	float zMax;
	uint padding;

	uint attributes[];
} info;

//currently the maximum amount of density attributes is 30!
layout( binding = 1, r8 ) uniform image3D densities[30];

layout(std430, binding = 2) buffer IndexBuffer{
	uint ind[];
};

layout(std430, binding = 3) buffer DataBuffer{
	float data[];
};

layout (local_size_x = 256,local_size_y=1,local_size_z=1) in;

void main(){
	if(gl_GlobalInvocationID.x >= info.amtOfIndices) return;
	uint i = ind[gl_GlobalInvocationID.x];
	ivec3 pos;
	pos.x = int((data[i*info.amtOfIndices + info.xInd] - info.xMin) / (info.xMax - info.xMin) * info.dimX);
	pos.y = int((data[i*info.amtOfIndices + info.yInd] - info.yMin) / (info.yMax - info.yMin) * info.dimY);
	pos.z = int((data[i*info.amtOfIndices + info.zInd] - info.zMin) / (info.zMax - info.zMin) * info.dimZ);

	//creating the vec4s which should be stored
	for(int j = 0;j<info.amtOfDensityAttributes;++j){
		uint attributeIndex = info.attributes[j];
		float data = data[i*info.amtOfIndices + attributeIndex];
		imageStore(densities[j], pos, vec4(data));
	}
}