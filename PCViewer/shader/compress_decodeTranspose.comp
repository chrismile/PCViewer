#version 460

#extension GL_EXT_scalar_block_layout: enable
#extension GL_EXT_buffer_reference: enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_shader_16bit_storage                     : enable
#extension GL_KHR_shader_subgroup_basic: enable
#extension GL_EXT_buffer_reference2: require
#extension GL_EXT_shader_explicit_arithmetic_types: enable
#extension GL_EXT_nonuniform_qualifier: enable

layout(constant_id = 0) const uint longSymbols = 0; //1 indicates 32 bit symbols, 0 indicates 16 bit symbols
layout(constant_id = 1) const uint codingBlockSize = 32;
layout(constant_id = 2) const uint subgroupSize = 32;   // is used to set the local size correctly
layout(constant_id = 3) const uint sizeY = 8;           // used to set local size y correctly

layout(buffer_reference, scalar) buffer Symbols {u16vec2 i[];};  // raw data
layout(buffer_reference, scalar) buffer Codewords {uint i[];};
layout(buffer_reference, scalar) buffer Offsets {uint i[];};
layout(buffer_reference, scalar) buffer EncodeCodewords {uint i[];};
layout(buffer_reference, scalar) buffer EncodeCodewordLengths{uint i[];};
layout(buffer_reference, scalar) buffer DecodeTable {u16vec2 i[];};

layout(binding = 0) buffer HuffmanInfo{
    uint64_t symbolStream;

    uint64_t codewordStream;
    uint64_t offsets;
    uint64_t encodeCodewords;
    uint64_t encodeCodewordLengths;
    uint64_t decodeTable;
    uint decodeSymbolTableSize;
    uint symbolCount;
}infos[];

layout (local_size_x_id = 2,local_size_y_id = 3,local_size_z=1) in;

// "+2" padding instead of "+1" because of 2-byte elements vs 4-byte bank size!
shared u16vec2 block[subgroupSize][codingBlockSize + 2];

void main(){
    const uint transposeBlockdimX = gl_SubgroupSize;
    const uint transposeBlockdimY = gl_WorkGroupSize.y;
    const uvec2 threadIdx = gl_LocalInvocationID.xy;
    Symbols symbolStream = Symbols(infos[gl_WorkGroupID.y].symbolStream);
    
    uint symbolStreamOffset = gl_WorkGroupID.x * codingBlockSize * gl_SubgroupSize;
    // load into shared memory and transpose
    // each thread fills one row of the smem buffer
    #pragma unroll
    for(uint col = threadIdx.y; col < codingBlockSize; col += transposeBlockdimY) {
        uint index = threadIdx.x + col * gl_SubgroupSize;
        if(bool(longSymbols)){
            block[threadIdx.x][col] = symbolStream.i[symbolStreamOffset + index];
        }
        else{
            uint ind = symbolStreamOffset + index;
            block[threadIdx.x][col >> 1][col & 1] = symbolStream.i[ind >> 1][ind & 1];
        }
    }
    barrier();

    // write out (4-byte elements)
    uint factor = 1; // = sizeof(uint) / sizeof(Symbol)
    uint div = 2;
    if(bool(longSymbols))
        div = 1;
    //if(longSymbols == 0)  // not needed, as always full bytes can be loaded by default
    //    factor = 2;

    for(uint col = threadIdx.x; col < (codingBlockSize / div); col += transposeBlockdimX) {
        #pragma unroll
        for(uint row = threadIdx.y; row < gl_SubgroupSize; row += transposeBlockdimY) {
            uint index = row * codingBlockSize / div + col;
            symbolStream.i[index + symbolStreamOffset / div] = block[row][col];
        }
    }
}