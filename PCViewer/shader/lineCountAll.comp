#version 450
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_NV_shader_subgroup_partitioned: enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_shuffle: enable

layout(binding = 0) buffer vA{uint v[];}a[]; 

layout(binding = 2) buffer Lines{
    uint v[];
}c[];

layout(binding = 3) buffer Activations{uint activations[];};

layout(binding = 4) uniform Infos{
    uint amtOfDataPoints;
    uint aBins, bBins;      // b bins is used to determine switch of attributes (needs to be done to account for not increasingly ordered attributes)
    uint indexOffset;
    uint amtOfCounts;
    uint attributeActive;   // each bit stands for a single attribute which is needed for counting
    uint countActive;
    uint priorityAttributeValue;// combined attribute index in the upper 16 bits and priority value in the lower 16 bits, normalizes-> 65535 is max value, 0 the lowest
    uint countIndices[];    // essentially this is an array containing the sorted indices
};

const uint reductionAdd = 0;
const uint reductionAddNonAtomic = 1;
const uint reductionAddPartitionNonAtomic = 2;
const uint reductionSubgroupAdd = 3;
const uint reductionSubgroupAllAdd = 4;
const uint reductionMin = 5;
const uint reductionSubgroupMin = 6;
const uint reductionMax = 7;        // currently unused
const uint reductionSubgroupMax = 8;// used for priority rendering
const uint reductionAddPartitionGeneric = 9;    // same as add partition but without nv things

layout(constant_id = 0) const uint reductionType = reductionAdd;

layout (local_size_x = 256,local_size_y=1,local_size_z=1) in;

void main(){
    if(gl_GlobalInvocationID.x >= amtOfDataPoints)
        return;
    const uint indexDiv32 = gl_GlobalInvocationID.x / 32 + indexOffset;  // index offset is already divided by 32
    uint act = activations[indexDiv32];
    if((act & (1 << (gl_GlobalInvocationID.x & 31))) == 0)
        return;
    float priorityAxisValue;
    uint priorityMapped;
    uint priorityAttribute;
    if(reductionType == reductionSubgroupMax){
        priorityAttribute = priorityAttributeValue >> 16;
        float priorityValue = float(priorityAttributeValue & 0xffff) / 65535.f;  //65535 = 2^16 - 1
        priorityAxisValue = unpackHalf2x16(a[priorityAttribute].v[gl_GlobalInvocationID.x >> 1])[gl_GlobalInvocationID.x & 1];
        priorityMapped = 65535 - uint(abs(priorityAxisValue - priorityValue) / max(priorityValue, 1.f - priorityValue) * 65535.f);  //65535 = 2^16 - 1
    }
    
    float aVal;
    if(reductionType == reductionSubgroupMax && priorityAttribute == 0)
        aVal = priorityAxisValue;
    else
        aVal = unpackHalf2x16(a[0].v[gl_GlobalInvocationID.x >> 1])[gl_GlobalInvocationID.x & 1];
    for(int i = 1; i <= amtOfCounts; ++i){
        float bVal;
        if(reductionType == reductionSubgroupMax && priorityAttribute == i)
            bVal = priorityAxisValue;
        else
            bVal = unpackHalf2x16(a[i].v[gl_GlobalInvocationID.x >> 1])[gl_GlobalInvocationID.x & 1];
        uint binA = min(uint(aVal * float(aBins)), aBins - 1);
        uint binB = min(uint(bVal * float(aBins)), aBins - 1);
        if(bool(bBins & (1 << (i - 1)))){ // switching bins if switching bit is set
            uint tmp = binA;
            binA = binB;
            binB = tmp;
        }
        uint finalBin = binA * aBins + binB;    // linear index

        //atomicAdd(c[i - 1].v[finalBin], 1);

        switch(reductionType){
        case reductionAdd:
            atomicAdd(c[i - 1].v[finalBin], 1);
            break;
        case reductionAddNonAtomic:
            c[i - 1].v[finalBin] += 1;
            break;
        case reductionAddPartitionNonAtomic:
            // Find subgroup ( sg ) indices with same pixelID
            uvec4 sg = subgroupPartitionNV(finalBin);
            uint count = subgroupPartitionedAddNV(1, sg);
            uint tId = subgroupPartitionedMinNV(gl_SubgroupInvocationID, sg);
            if(tId == gl_SubgroupInvocationID)
                c[i - 1].v[finalBin] += count;         // incrementing
            break;
        case reductionSubgroupAdd:
            // Find subgroup ( sg ) indices with same pixelID
            sg = subgroupPartitionNV(finalBin);
            count = subgroupPartitionedAddNV(1, sg);
            tId = subgroupPartitionedMinNV(gl_SubgroupInvocationID, sg);
            if(tId == gl_SubgroupInvocationID)
                atomicAdd(c[i - 1].v[finalBin], count);         // incrementing
            break;
        case reductionSubgroupAllAdd:
            if(subgroupAllEqual(finalBin) && subgroupElect())
                atomicAdd(c[i - 1].v[finalBin], gl_SubgroupSize);
            else
                atomicAdd(c[i - 1].v[finalBin], 1);
            break;
        case reductionMin:
            uint val = 20;
            if(val < c[i - 1].v[finalBin])
                atomicMin(c[i - 1].v[finalBin], val);
            break;
        case reductionSubgroupMin:
            val = 20;
            sg = subgroupPartitionNV(finalBin);
            uint m = subgroupPartitionedMinNV(val, sg);
            if(val < c[i - 1].v[finalBin] && m == val)
                atomicMin(c[i - 1].v[finalBin], val);

            break;
        case reductionMax:

            break;
        case reductionSubgroupMax:
            // hardcoding center to 1 on first axis
            val = priorityMapped;

            sg = subgroupPartitionNV(finalBin);
            m = subgroupPartitionedMaxNV(val, sg);
            if(val > c[i - 1].v[finalBin] && m == val)
                atomicMax(c[i - 1].v[finalBin], val);

            break;
        case reductionAddPartitionGeneric:
            bool cont = true;
            // runtime: 120 ms for 30 million
            //for(int iter = 0; cont && iter < gl_SubgroupInvocationID + 1; ++iter){
            //    uint currentBin = subgroupBroadcastFirst(finalBin);
            //    uvec4 binCount = subgroupBallot(currentBin == finalBin);
            //    uint count = subgroupBallotBitCount(binCount);
            //    if(subgroupBallotFindLSB(binCount) == gl_SubgroupInvocationID)
            //        atomicAdd(c[i - 1].v[finalBin], count);
            //    if(currentBin == finalBin)
            //        cont = false;
            //}
            // runtime: 120 ms for 30 million
            //for(uint iter = 0; cont && iter < gl_SubgroupSize; ++iter){
            //    uint currentBin = subgroupShuffle(finalBin, iter);
            //    uvec4 binCount = subgroupBallot(currentBin == finalBin);
            //    uint count = subgroupBallotBitCount(binCount);
            //    if(iter == gl_SubgroupInvocationID)
            //        atomicAdd(c[i - 1].v[finalBin], count);
            //    if(currentBin == finalBin)
            //        cont = false;
            //}
            // runtime: 120ms for 30 million
            uint inc = 0;
            for(uint iter = 0; cont && iter < gl_SubgroupSize; ++iter){
                uint currentBin = subgroupShuffle(finalBin, iter);
                uvec4 binCount = subgroupBallot(currentBin == finalBin);
                uint count = subgroupBallotBitCount(binCount);
                if(iter == gl_SubgroupInvocationID)
                    inc = count;
                if(currentBin == finalBin)
                    cont = false;
            }
            if(inc > 0)
                atomicAdd(c[i - 1].v[finalBin], inc);
            break;
        }

        aVal = bVal;
    }
}