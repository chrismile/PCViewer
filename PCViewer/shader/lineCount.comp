#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_NV_shader_subgroup_partitioned : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_ballot: enable

layout(binding = 0) buffer vA{uint aVals[];}; 

layout(binding = 1) buffer vB{uint bVals[];}; 

layout(binding = 2) buffer Lines{
	uint counts[];
};

layout(binding = 3) buffer Activations{uint activations[];};

layout(binding = 4) uniform Infos{
    uint amtOfDataPoints;
    uint aBins, bBins;
    uint indexOffset;
};

const uint reductionAdd = 0;
const uint reductionAddNonAtomic = 1;
const uint reductionAddPartitionNonAtomic = 2;
const uint reductionSubgroupAdd = 3;
const uint reductionSubgroupAllAdd = 4;
const uint reductionMin = 5;
const uint reductionSubgroupMin = 6;
const uint reductionMax = 7;        // currently unused
const uint reductionSubgroupMax = 8;// currently unused
const uint reductionAddPartitionGeneric = 9;    // same as add partition but without nv things

layout(constant_id = 0) const uint reductionType = reductionAdd;

layout (local_size_x = 256,local_size_y=1,local_size_z=1) in;

//#define USE_PARTITION

// as each element of aVals and bVals contain two float16 we have to unpack
void main(){
    const uint indexDiv32 = gl_GlobalInvocationID.x / 32 + indexOffset;  // index offset is already divided by 32
    if(indexDiv32 * 32 >= amtOfDataPoints)
        return;
    uint act = activations[indexDiv32];
    if((act & (1 << (gl_GlobalInvocationID.x & 31))) == 0)
        return;
    float aVal = unpackHalf2x16(aVals[gl_GlobalInvocationID.x >> 1])[gl_GlobalInvocationID.x & 1];
    float bVal = unpackHalf2x16(bVals[gl_GlobalInvocationID.x >> 1])[gl_GlobalInvocationID.x & 1];
    uint binA = min(uint(aVal * float(aBins)), aBins - 1);
    uint binB = min(uint(bVal * float(bBins)), bBins - 1);
    //binA = uint(float(gl_GlobalInvocationID.x) / float(amtOfDataPoints) * float(aBins));
    //binB = uint(float(gl_GlobalInvocationID.x * 2) / float(amtOfDataPoints) * float(bBins)) % bBins;
    uint finalBin = binA * bBins + binB;    // linear index

    switch(reductionType){
    case reductionAdd:
        atomicAdd(counts[finalBin], 1);
        break;
    case reductionAddNonAtomic:
        counts[finalBin] += 1;
        break;
    case reductionAddPartitionNonAtomic:
        // Find subgroup ( sg ) indices with same pixelID
        uvec4 sg = subgroupPartitionNV(finalBin);
        uint count = subgroupPartitionedAddNV(1, sg);
        uint tId = subgroupPartitionedMinNV(gl_SubgroupInvocationID, sg);
        if(tId == gl_SubgroupInvocationID)
            counts[finalBin] += count;         // incrementing
        break;
    case reductionSubgroupAdd:
        // Find subgroup ( sg ) indices with same pixelID
        sg = subgroupPartitionNV(finalBin);
        count = subgroupPartitionedAddNV(1, sg);
        tId = subgroupPartitionedMinNV(gl_SubgroupInvocationID, sg);
        if(tId == gl_SubgroupInvocationID)
            atomicAdd(counts[finalBin], count);         // incrementing
        break;
    case reductionSubgroupAllAdd:
        if(subgroupAllEqual(finalBin) && subgroupElect())
            atomicAdd(counts[finalBin], gl_SubgroupSize);
        else
            atomicAdd(counts[finalBin], 1);
        break;
    case reductionMin:
        uint val = 20;
        if(val < counts[finalBin])
            atomicMin(counts[finalBin], val);
        break;
    case reductionSubgroupMin:
        val = 20;
        sg = subgroupPartitionNV(finalBin);
        uint m = subgroupPartitionedMinNV(val, sg);
        if(val < counts[finalBin] && m == val)
            atomicMin(counts[finalBin], val);

        break;
    case reductionMax:

        break;
    case reductionSubgroupMax:

        break;
    case reductionAddPartitionGeneric:
        bool cont = true;
        for(int i = 0; cont && i < gl_SubgroupInvocationID + 1; ++i){
            uint currentBin = subgroupBroadcastFirst(finalBin);
            uvec4 binCount = subgroupBallot(currentBin == finalBin);
            uint count = subgroupBallotBitCount(binCount);
            if(subgroupBallotFindLSB(binCount) == gl_SubgroupInvocationID)
                atomicAdd(counts[finalBin], count);
            if(currentBin == finalBin)
                cont = false;
        }
        break;
    }
    //if(useSubgroupPartition > 0){
    //    // Find subgroup ( sg ) indices with same pixelID
    //    uvec4 sg = subgroupPartitionNV(finalBin);
    //    uint count = subgroupPartitionedAddNV(1, sg);
    //    uint tId = subgroupPartitionedMinNV(gl_SubgroupInvocationID, sg);
    //    if(tId == gl_SubgroupInvocationID)
    //        atomicAdd(counts[finalBin], count);         // incrementing
    //}
    //else
    //    atomicAdd(counts[finalBin], 1);
}