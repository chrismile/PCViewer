#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(std430, binding = 0) buffer Informations{
	uint amtOfAttributes;
	uint amtOfBrushAttributes;
	uint amtOfIndices;
	uint dimX;

	uint dimY;
	uint dimZ;
	uint xInd;
	uint yInd;

	uint zInd;
	float xMin;
	float xMax;
	float yMin;

	float yMax;
	float zMin;
	float zMax;
	uint regularGrid;
} info;

layout(binding = 1, r8 ) uniform imageBuffer act;

layout(std430, binding = 2) buffer IndexBuffer{
	uint ind[];
};

layout(std430, binding = 3) buffer DataBuffer{
	float data[];
};

layout(binding = 4, r8) uniform writeonly image3D binary;

layout (local_size_x = 256,local_size_y=1,local_size_z=1) in;

void main(){
	if(gl_GlobalInvocationID.x >= info.amtOfIndices) return;
	uint i = ind[gl_GlobalInvocationID.x];
	if(!bool(imageLoad(act,int(i)))) return;

	ivec3 pos;
	if(bool(info.regularGrid)){
		pos.x = int(((data[i*info.amtOfAttributes + info.xInd] - info.xMin) / (info.xMax - info.xMin)) * float(info.dimX));
		pos.y = int(((data[i*info.amtOfAttributes + info.yInd] - info.yMin) / (info.yMax - info.yMin)) * float(info.dimY));
		pos.z = int(((data[i*info.amtOfAttributes + info.zInd] - info.zMin) / (info.zMax - info.zMin)) * float(info.dimZ));
		if(pos.x<0||pos.y<0||pos.z<0||pos.x>=info.dimX||pos.y>=info.dimY||pos.z>=info.dimZ) return;
	}
	else{
		pos.x = int(((data[i*info.amtOfAttributes + info.xInd] - info.xMin) / (info.xMax - info.xMin)) * float(info.dimX));
		pos.y = int(((data[i*info.amtOfAttributes + info.yInd] - info.yMin) / (info.yMax - info.yMin)) * float(info.dimY + 43));
		pos.z = int(((data[i*info.amtOfAttributes + info.zInd] - info.zMin) / (info.zMax - info.zMin)) * float(info.dimZ));
		if(pos.x<0||pos.y<0||pos.z<0||pos.x>=info.dimX||pos.y>=info.dimY + 43||pos.z>=info.dimZ) return;
	}

	//storing 1 if element is in the brush
	imageStore(binary, pos, vec4(1));
	if(!bool(info.regularGrid)){
		imageStore(binary, pos + ivec3(0,1,0),vec4(1));
	}
}