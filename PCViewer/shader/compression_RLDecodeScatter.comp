#version 460
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_KHR_vulkan_glsl: enable

layout(binding = 0) buffer D{
    u16vec2 s[];
}symbolsCompact;

layout(binding = 1) buffer I{
    uint i[];
}validIndices;

layout(binding = 2) buffer S{
    u16vec2 s[];
}symbols;

layout(push_constant) uniform PC{
    uint symbolCountCompact;
    uint longSymbols;
};

layout (constant_id = 0) const int SUBGROUP_SIZE = 32;

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

void main(){
    ivec2 blockIdx = ivec2(gl_WorkGroupID.xy);
    ivec2 blockDim = ivec2(gl_WorkGroupSize.xy);
    ivec2 threadIdx = ivec2(gl_LocalInvocationID.xy);
    ivec2 gridDim = ivec2(gl_NumWorkGroups.xy);
    for(uint index = blockIdx.x * blockDim.x + threadIdx.x; index < symbolCountCompact; index += gridDim.x * blockDim.x) {
        uint outIndex = validIndices.i[index] + index;
        if(bool(longSymbols))
            symbols.s[outIndex] = symbolsCompact.s[index];
        else
            symbols.s[outIndex >> 1][outIndex & 1] = symbolsCompact.s[index >> 1][index & 1];
    }
}