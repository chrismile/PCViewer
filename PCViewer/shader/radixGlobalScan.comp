#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

#include "radixHeader.glsl"

layout(local_size_x = NUMKEYS, local_size_y = 1, local_size_z = 1) in;

shared uint ma[(NUMKEYS + SUBGROUP_SIZE - 1) / SUBGROUP_SIZE];
void main(){
    uint histogramIndex = gl_WorkGroupID.x % uniformInfo.amtOfGlobalHistograms;
    uint binVal;
    if(gl_WorkGroupID.x < uniformInfo.amtOfGlobalHistograms)
        binVal = uniformInfo.globalHistograms[histogramIndex].keyCount[gl_LocalInvocationID.x];
    else
        binVal = groupInfos.i[histogramIndex].keyCount[gl_LocalInvocationID.x];
    //in subgroup exclusive add
    uint offset = subgroupExclusiveAdd(binVal);
    if(gl_SubgroupInvocationID == SUBGROUP_SIZE - 1)
        ma[gl_SubgroupID] = offset + binVal;
    barrier();  // waiting for all subgroups to have filled the ma array
    if(gl_LocalInvocationID.x < gl_NumSubgroups){
        uint maxes = ma[gl_LocalInvocationID.x];
        maxes = subgroupExclusiveAdd(maxes);    //assumes that the second reduction can be done in subgroup memory. Possible if (subgroupsize)Â² >= NUMKEYS -> 16 wide (is ensured by cpp side)
        ma[gl_LocalInvocationID.x] = maxes;
    }
    barrier();  //waiting for the exclusive add threads to finish
    offset += ma[gl_SubgroupID];
    if(gl_WorkGroupID.x < uniformInfo.amtOfGlobalHistograms)
        uniformInfo.globalHistograms[histogramIndex].keyCount[gl_LocalInvocationID.x] = offset;
    else
        groupInfos.i[histogramIndex].keyCount[gl_LocalInvocationID.x] = offset;
}