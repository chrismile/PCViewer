#version 450
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_NV_shader_subgroup_partitioned: enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_ballot: enable

layout(binding = 0) buffer vA{uint v[];}aVal[]; 

layout(binding = 2) buffer Lines{
    uint v[];
}c[];

layout(binding = 3) buffer BrushInfo{
    uint amtOfDataPoints;
    uint amtOfAttributes;
    uint amtOfBrushes;
    uint andBrushes;
    uint offsetLassoBrushes; 
    uint outputOffset;          // already converted from bit offset to uint offset
    uint activeBrushAttributes; // each bit stands for a single attribute which is need for brushing
    uint padding;
    float brushData[];          // for information on brush Data layout look at ComputeBrushes.cpp -> updateActiveIndices()
};

layout(binding = 4) uniform Infos{
    uint amtOfDataPointss;
    uint aBins, bBins;      // b bins is used to determine switch of attributes (needs to be done to account for not increasingly ordered attributes)
    uint indexOffset;
    uint amtOfCounts;
    uint attributeActive;   // each bit stands for a single attribute which is needed for counting
    uint countActive;
    uint paddingg;
    uint countIndices[];    // essentially this is an array containing the sorted indices
};

const uint reductionAdd = 0;
const uint reductionAddNonAtomic = 1;
const uint reductionAddPartitionNonAtomic = 2;
const uint reductionSubgroupAdd = 3;
const uint reductionSubgroupAllAdd = 4;
const uint reductionMin = 5;
const uint reductionSubgroupMin = 6;
const uint reductionMax = 7;        // currently unused
const uint reductionSubgroupMax = 8;// currently unused
const uint reductionAddPartitionGeneric = 9;    // same as add partition but without nv things

layout(constant_id = 0) const uint reductionType = reductionAdd;
layout(constant_id = 1) const uint maxAttributes = 16;

layout (local_size_x = 256,local_size_y=1,local_size_z=1) in;

void main(){
    if(gl_GlobalInvocationID.x >= amtOfDataPoints)
        return;

    float axisValues[maxAttributes];
    
    // checking activation and loading activation values
    bool a = amtOfBrushes == 0 || andBrushes > 0; // if no brushes data has to be active
    // going through all brushes and testing for activatinos
    for(int brush = 0; brush < amtOfBrushes; ++brush){
        bool inside = true;
        uint brushOffset = uint(brushData[brush]);
        for(int axisMap = 0; axisMap < brushData[brushOffset]; ++axisMap){
            uint axisMapOffset = uint(brushData[brushOffset + 1 + axisMap]);
            uint axis = uint(brushData[axisMapOffset + 1]);
            //Data axisData = Data(dataAddresses[axis]);
            uint dataIndex = gl_GlobalInvocationID.x;
            axisValues[axis] = unpackHalf2x16(aVal[axis].v[gl_GlobalInvocationID.x >> 1])[gl_GlobalInvocationID.x & 1];
            float axisVal = axisValues[axis];
            bool inRange = false;
            for(int range = 0; range < brushData[axisMapOffset]; ++range){
                uint rangeOffset = uint(brushData[axisMapOffset + 2 + range]);
                float min = brushData[rangeOffset];
                float max = brushData[rangeOffset + 1];
                if(axisVal >= min && axisVal <= max){
                    inRange = true;
                    break;
                }
            }
            inside = inside && inRange;
            if(!inside)
                break;
        }
        if(andBrushes > 0 && !inside){
            a = false;
            break;
        }
        else if(andBrushes == 0 && inside){
            a = true;
            break;
        }
    }

    // TODO: missing lasso brushes

    if(!a)
        return;  

    // loading the attribute values missing for counting
    uint missingAttributes = attributeActive & (~activeBrushAttributes);
    for(int i = 0; i <= amtOfAttributes; ++i){
        if((missingAttributes & (1 << i)) == 0)
            continue;
        axisValues[i] = unpackHalf2x16(aVal[i].v[gl_GlobalInvocationID.x >> 1])[gl_GlobalInvocationID.x & 1];
    }

    //increasing activation counter
    for(int i = 1; i <= amtOfCounts; ++i){
        if((countActive & (1 << (i - 1))) == 0) // only do counts that need to be updated
            continue;
        float aVal = axisValues[i -1];
        float bVal = axisValues[i];
        uint binA = min(uint(aVal * float(aBins)), aBins - 1);
        uint binB = min(uint(bVal * float(aBins)), aBins - 1);
        if(bool(bBins & (1 << (i - 1)))){ // switching bins if switching bit is set
            uint tmp = binA;
            binA = binB;
            binB = tmp;
        }
        uint finalBin = binA * aBins + binB;    // linear index

        //atomicAdd(c[i - 1].v[finalBin], 1);

        switch(reductionType){
        case reductionAdd:
            atomicAdd(c[i - 1].v[finalBin], 1);
            break;
        case reductionAddNonAtomic:
            c[i - 1].v[finalBin] += 1;
            break;
        case reductionAddPartitionNonAtomic:
            // Find subgroup ( sg ) indices with same pixelID
            uvec4 sg = subgroupPartitionNV(finalBin);
            uint count = subgroupPartitionedAddNV(1, sg);
            uint tId = subgroupPartitionedMinNV(gl_SubgroupInvocationID, sg);
            if(tId == gl_SubgroupInvocationID)
                c[i - 1].v[finalBin] += count;         // incrementing
            break;
        case reductionSubgroupAdd:
            // Find subgroup ( sg ) indices with same pixelID
            sg = subgroupPartitionNV(finalBin);
            count = subgroupPartitionedAddNV(1, sg);
            tId = subgroupPartitionedMinNV(gl_SubgroupInvocationID, sg);
            if(tId == gl_SubgroupInvocationID)
                atomicAdd(c[i - 1].v[finalBin], count);         // incrementing
            break;
        case reductionSubgroupAllAdd:
            if(subgroupAllEqual(finalBin) && subgroupElect())
                atomicAdd(c[i - 1].v[finalBin], gl_SubgroupSize);
            else
                atomicAdd(c[i - 1].v[finalBin], 1);
            break;
        case reductionMin:
            uint val = 20;
            if(val < c[i - 1].v[finalBin])
                atomicMin(c[i - 1].v[finalBin], val);
            break;
        case reductionSubgroupMin:
            val = 20;
            sg = subgroupPartitionNV(finalBin);
            uint m = subgroupPartitionedMinNV(val, sg);
            if(val < c[i - 1].v[finalBin] && m == val)
                atomicMin(c[i - 1].v[finalBin], val);

            break;
        case reductionMax:

            break;
        case reductionSubgroupMax:

            break;
        case reductionAddPartitionGeneric:
            bool cont = true;
            for(int iter = 0; cont && iter < gl_SubgroupInvocationID + 1; ++iter){
                uint currentBin = subgroupBroadcastFirst(finalBin);
                uvec4 binCount = subgroupBallot(currentBin == finalBin);
                uint count = subgroupBallotBitCount(binCount);
                if(subgroupBallotFindLSB(binCount) == gl_SubgroupInvocationID)
                    atomicAdd(c[i - 1].v[finalBin], count);
                if(currentBin == finalBin)
                    cont = false;
            }
            break;
        }
    }
}