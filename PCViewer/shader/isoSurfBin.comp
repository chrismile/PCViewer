#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(std430, binding = 0) buffer Informations{
	uint amtOfAxis;
	uint maxX;
	uint maxY;
	uint maxZ;

	float brushes[];
} info;

//currently the maximum amount of density attributes is 30!
layout( binding = 1, r32f) uniform readonly image3D densities[30];

layout( binding = 2, r8) uniform writeonly image3D binary;

layout (local_size_x = 8,local_size_y=8,local_size_z=8) in;

void main(){
	if(gl_GlobalInvocationID.x >= info.maxX || gl_GlobalInvocationID.y >= info.maxY || gl_GlobalInvocationID.z >= info.maxZ) return;

	//check if all densities lie in the brush
	for(int axis = 0;axis<info.amtOfAxis;++axis){
		int axisOffset = int(info.brushes[axis]);
		//check if there exists a brush on this axis
		if(bool(info.brushes[axisOffset])){		//amtOfBrushes > 0
			//as there exist brushes we get the density for this attribute
			float density = imageLoad(densities[axis],ivec3(gl_GlobalInvocationID)).x;
			bool inside = true;
			//for every brush
			for(int brush = 0;brush<info.brushes[axisOffset];++brush){
				//for every MinMax
				int minMaxOffset = axisOffset + 1 + 2 * brush;			//+6 as after 1 the brush index lies, then the amtount of Minmax lies and then the color comes in a vec4
				//int brushIndex = int(info.brushes[brushOffset]);
				float mi = info.brushes[minMaxOffset];
				float ma = info.brushes[minMaxOffset + 1];
				if(density<mi || density>ma){
					inside = false;
					break;
				}
			}
			if(!inside){			//write 0 into binary texture and early out
				imageStore(binary, ivec3(gl_GlobalInvocationID), vec4(0));
				return;
			}
		}
	}

	//if we got to this point, all densites were inside the brushes
	imageStore(binary, ivec3(gl_GlobalInvocationID), vec4(1));
}