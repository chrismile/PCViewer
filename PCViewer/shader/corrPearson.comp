#version 460
#extension GL_EXT_shader_atomic_float: enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

layout (binding = 0) buffer Data{
    float d[];
}data;

layout(binding = 1) buffer IndexBuffer{
    uint ind[];
};

layout(binding = 2, r8 ) uniform imageBuffer act;

layout(binding = 3) buffer pearson{
    uint maxIndex;
    uint amtOfAttributes;
    uint baseAttribute;
    uint amtOfActiveIndices;
    double res[];    //contains: float[amtOfAttributes] means,  
                    //          float[amtOfAttributes] nominator,
                    //          float[amtOfAttributes] denom1,
                    //          float[amtOfAttributes] denom2
                    //          vec2[amtOfAttributes] mimas
};

#include "dataAccess.glsl"

layout (local_size_x = 256,local_size_y=1,local_size_z=1) in;

void main(){
    if(gl_GlobalInvocationID.x >= maxIndex) return;
    uint index = ind[gl_GlobalInvocationID.x];
    bool ac = bool(imageLoad(act, int(index)).x);
    for(int a = 0; a < amtOfAttributes; ++a){
        double aDiff = 0;
        double bDiff = 0;
        if(ac){
            aDiff = (getPackedData(index, a) - res[amtOfAttributes * 4 + 2 * a]) / (res[amtOfAttributes * 4 + 2 * a + 1] - res[amtOfAttributes * 4 + 2 * a]) - res[a];
            bDiff = (getPackedData(index, baseAttribute) - res[amtOfAttributes * 4 + 2 * baseAttribute]) / (res[amtOfAttributes * 4 + 2 * baseAttribute + 1] - res[amtOfAttributes * 4 + 2 * baseAttribute]) - res[baseAttribute];
        }
        //double aDiff = getPackedData(index, a) - res[a];
        //double bDiff = getPackedData(index, baseAttribute) - res[baseAttribute];
        double nominator = aDiff * bDiff;
        double denom1 = aDiff * aDiff;
        double denom2 = bDiff * bDiff;
        nominator = subgroupAdd(nominator);
        denom1 = subgroupAdd(denom1);
        denom2 = subgroupAdd(denom2);
        if(subgroupElect() && denom1 != 0 && denom2 != 0){
            atomicAdd(res[amtOfAttributes + a], nominator);
            atomicAdd(res[2 * amtOfAttributes + a], denom1);
            atomicAdd(res[3 * amtOfAttributes + a], denom2);
        }
    }
}