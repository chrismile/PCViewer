#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable

layout(std430, binding = 0) buffer Informations{
	uint numOfBins;
	uint numOfAttributes;
	uint numOfIndices;
	vec2 minMax[];
} info;

layout(std430, binding = 1) buffer Indices{
	uint i[];
}ind;

layout(std430, binding = 2) buffer Data{
	float data[];
}d;

layout(std430, binding = 3) buffer Bins{
	uint bins[];
}b;

layout (local_size_x = 256,local_size_y=1,local_size_z=1) in;

void main(){
	if(gl_GlobalInvocationID.x >= info.numOfIndices) return;
	for(int axis = 0; axis<info.numOfAttributes;++axis){
		float val = d.data[ind.i[gl_GlobalInvocationID.x]*info.numOfAttributes + axis];
		int binIndex = int((val-info.minMax[axis].x)/(info.minMax[axis].y-info.minMax[axis].x) * .999999f * info.numOfBins);		//multiplication with .999999f is done to prevent that a value could be added to bin at index numOfBins
		atomicAdd(b.bins[axis*info.numOfBins+binIndex],1);
	}
}