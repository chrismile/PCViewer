// code taken from https://github.com/CannyLab/tsne-cuda/blob/main/src/kernels/nbodyfft.cu and converted
// to glsl code for vulkan

#version 450

#include "tsne_common.glsl"

layout(push_constant) uniform PC{
    uint64_t kernel_tilde_address;
    float x_min;
    float y_min;
    float h;
    uint n_interpolation_points_1d;
    uint n_fft_coeffs;
};

Vec kernel_tilde = Vec(kernel_tilde_address);

void main(){
    uint TID, i, j;
    float tmp;
    TID = gl_GlobalInvocationID.x;
    if (TID >= n_interpolation_points_1d * n_interpolation_points_1d)
        return;

    i = TID / n_interpolation_points_1d;
    j = TID % n_interpolation_points_1d;

    // TODO: Possibly issuing a memory pre-fetch here could help the code.
    tmp = squared_cauchy_2d(y_min + h / 2, x_min + h / 2, y_min + h / 2 + i * h, x_min + h / 2 + j * h);
    kernel_tilde.d[(n_interpolation_points_1d + i) * n_fft_coeffs + (n_interpolation_points_1d + j)] = tmp;
    kernel_tilde.d[(n_interpolation_points_1d - i) * n_fft_coeffs + (n_interpolation_points_1d + j)] = tmp;
    kernel_tilde.d[(n_interpolation_points_1d + i) * n_fft_coeffs + (n_interpolation_points_1d - j)] = tmp;
    kernel_tilde.d[(n_interpolation_points_1d - i) * n_fft_coeffs + (n_interpolation_points_1d - j)] = tmp;
}
