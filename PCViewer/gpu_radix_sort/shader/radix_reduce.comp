#version 450
#extension GL_GOOGLE_include_directive: enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "radix_common.glsl"

void main()
{
// Figure out what bin data we are reducing
    uint BinID = groupID / NumReduceThreadgroupPerBin;
    uint BinOffset = BinID * NumThreadGroups;

    // Get the base index for this thread group
    uint BaseIndex = (groupID % NumReduceThreadgroupPerBin) * FFX_PARALLELSORT_ELEMENTS_PER_THREAD * FFX_PARALLELSORT_THREADGROUP_SIZE;

    // Calculate partial sums for entries this thread reads in
    uint threadgroupSum = 0;
    for (uint i = 0; i < FFX_PARALLELSORT_ELEMENTS_PER_THREAD; ++i)
    {
        uint DataIndex = BaseIndex + (i * FFX_PARALLELSORT_THREADGROUP_SIZE) + localID;
        threadgroupSum += (DataIndex < NumThreadGroups) ? SumTable.d[BinOffset + DataIndex] : 0;
    }

    // Reduce across the entirety of the thread group
    threadgroupSum = FFX_ParallelSort_ThreadgroupReduce(threadgroupSum, localID);

    // First thread of the group writes out the reduced sum for the bin
    if (localID == 0)
        ReduceTable.d[groupID] = threadgroupSum;
}